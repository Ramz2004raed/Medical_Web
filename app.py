import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
import joblib
from flask import Flask, request, jsonify
from flask_cors import CORS


# البيانات
data = {
    'symptoms': [
        'حمى, سعال, إرهاق, آلام عضلية',
        'سعال, ضيق تنفس, حمى, ألم صدر',
        'سيلان الأنف, عطاس, التهاب الحلق',
        'صداع, دوخة, نزيف الأنف',
        'ضيق تنفس, صفير, سعال',
        'عطش, تبول متكرر, فقدان وزن',
        'صداع شديد, غثيان, حساسية للضوء',
        'صداع, احتقان الأنف, ألم الوجه',
        'ألم البطن, غثيان, حرقة',
        'يرقان, تعب, ألم البطن',
        'سعال مزمن, حمى, تعرق ليلي',
        'حمى, قشعريرة, آلام الجسم',
        'ألم الحلق, صعوبة البلع, حمى',
        'ألم الأذن, حمى, ضعف السمع',
        'ألم المفاصل, تورم, تيبس',
        'ألم الظهر, تبول مؤلم, غثيان',
        'ألم المفاصل, تورم, احمرار',
        'ألم البطن, غثيان, حمى',
        'ألم البطن, انتفاخ, إمساك أو إسهال',
        'احمرار, حكة, طفح جلدي',
        'ألم الصدر, ضيق تنفس, تعرق',
        'ضعف مفاجئ, صعوبة كلام, دوخة',
        'تعب, شحوب, ضيق تنفس',
        'عطاس, حكة الأنف, احتقان',
        'سعال, بلغم, ضيق تنفس',
        'حزن, فقدان الاهتمام, تغيرات النوم',
        'توتر, تسارع القلب, صعوبة التركيز',
        'ضعف عضلي, تنميل, مشاكل توازن',
        'نوبات تشنج, فقدان الوعي, ارتباك',
        'سعال مزمن, فقدان وزن, ألم صدر',
        'صداع شديد, تيبس الرقبة, حمى',
        'طفح جلدي مؤلم, حكة, حمى',
        'طفح جلدي, حمى, حكة',
        'ألم المفاصل, حمى, طفح جلدي',
        'ألم البطن العلوي, غثيان, قيء',
        'ألم البطن, حرقة, غثيان',
        'عصبية, فقدان وزن, تسارع قلب',
        'تعب, زيادة وزن, جفاف الجلد',
        'تورم الساقين, ألم, ظهور عروق',
        'ألم الحوض, صعوبة التبول, حمى',
        'سعال, ضيق تنفس, بلغم',
        'ألم البطن, تعب, غثيان',
        'ألم عند التبول, تبول متكرر, ألم البطن',
        'طفح جلدي, تورم, صعوبة تنفس',
        'احمرار العين, حكة, دموع',
        'ألم العظام, سهولة الكسر, تقوس الظهر',
        'نزيف اللثة, تورم, احمرار',
        'بقع جلدية, حكة, تقشر',
        'تورم, احمرار, ألم في الساق',
        'حمى, ألم البطن, طفح جلدي'
    ],
    'disease': [
        'الإنفلونزا', 'التهاب رئوي', 'نزلة برد', 'ارتفاع ضغط الدم', 'الربو', 'السكري', 'الصداع النصفي', 'التهاب الجيوب الأنفية', 'التهاب المعدة', 'التهاب الكبد الوبائي',
        'السل', 'الملاريا', 'التهاب اللوزتين', 'التهاب الأذن الوسطى', 'التهاب المفاصل', 'حصوات الكلى', 'النقرس', 'التهاب الزائدة الدودية', 'القولون العصبي', 'التهاب الجلد',
        'الذبحة الصدرية', 'الجلطة الدماغية', 'فقر الدم', 'حساسية الأنف', 'التهاب القصبات', 'الاكتئاب', 'القلق', 'التصلب المتعدد', 'الصرع', 'سرطان الرئة',
        'التهاب السحايا', 'الحزام الناري', 'جدري الماء', 'الحمى الروماتيزمية', 'التهاب البنكرياس', 'قرحة المعدة', 'فرط نشاط الغدة الدرقية', 'قصور الغدة الدرقية', 'الدوالي', 'التهاب البروستاتا',
        'الانسداد الرئوي المزمن', 'التهاب الكبد الدهني', 'التهاب المثانة', 'حساسية الطعام', 'التهاب العين', 'هشاشة العظام', 'التهاب اللثة', 'الصدفية', 'التهاب الوريد', 'التيفوئيد'
    ]
}

# تحويل البيانات إلى DataFrame
df = pd.DataFrame(data)

# تحويل الأعراض إلى ميزات رقمية باستخدام TfidfVectorizer
vectorizer = TfidfVectorizer()
X_symptoms = vectorizer.fit_transform(df['symptoms'])

# دمج الأعراض في مجموعة ميزات واحدة
X = pd.DataFrame(X_symptoms.toarray())

# الهدف (الداء)
y = df['disease']

# تدريب نموذج RandomForest
model = RandomForestClassifier()
model.fit(X, y)

# حفظ النموذج المدرب و TfidfVectorizer
joblib.dump(model, 'model_without_age.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')

# إنشاء تطبيق Flask
app = Flask(__name__)
CORS(app)  # السماح بالتواصل مع الواجهة الأمامية

# تحميل النموذج المدرب و vectorizer عند بدء التطبيق
model = joblib.load('model_without_age.pkl')
vectorizer = joblib.load('vectorizer.pkl')

@app.route('/')
def home():
    return jsonify({"message": "🚀 خادم Flask يعمل بنجاح!"})

@app.route('/diagnosis', methods=['POST'])
def diagnosis():
    try:
        data = request.json
        symptoms = data.get("symptoms", [])

        if not symptoms or not isinstance(symptoms, list):
            return jsonify({"error": "❌ يرجى إدخال الأعراض بشكل صحيح"}), 400

        # تحويل الأعراض المدخلة إلى نفس التنسيق الذي تم تدريبه عليه
        input_symptoms = vectorizer.transform([', '.join(symptoms)])

        # الحصول على التشخيص الأكثر احتمالًا
        predicted_disease = model.predict(input_symptoms)[0]

        return jsonify({
            "message": "التشخيص المحتمل: ",
            "status": "success",
            "result": [{"disease": predicted_disease}]
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
